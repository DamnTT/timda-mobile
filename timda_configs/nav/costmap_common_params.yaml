max_obstacle_height: 1.5 # assume something like an arm is mounted on top of the robot

# TIMDA's shape
footprint: [[0.3745, 0.1715], [0.4395, 0.287], [0.3915, 0.333], [0.27634, 0.271], [-0.3745, 0.271],
            [-0.3745, -0.1715], [-0.4395, -0.287], [-0.3915, -0.333], [-0.27634, -0.271], [0.3745, -0.271]]
#robot_radius: ir_of_robot

map_type: voxel

#Set the tolerance we're willing to have for tf transforms
transform_tolerance: 0.05

#Obstacle marking parameters
obstacle_layer:
  enabled: true
  max_obstacle_height: 0.6
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 2
  unknown_threshold: 15
  mark_threshold: 0
  combination_method: 1
  track_unknown_space: true
  obstacle_range: 2.5
  raytrace_range: 3.0
  publish_voxel_map: false
  observation_sources: scan
  scan:
    sensor_frame: base_link
    data_type: LaserScan
    topic: scan_multi
    marking: true
    clearing: true
    min_obstacle_height: 0.0
    max_obstacle_height: 1.5

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.525  # max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:
  enabled:              true

#Inscribed and circumscribed radius 
inscribed_radius: 0.171.5
circumscribed_radius: 0.525

#Cost function parameters
inflation_radius: 0.525
cost_scaling_factor: 10.0

# observation_sources: laser_scan_sensor # point_cloud_sensor

# laser_scan_sensor: {sensor_frame: base_link, data_type: LaserScan, topic: scan_multi, marking: true, clearing: true}

# point_cloud_sensor: {sensor_frame: frame_name, data_type: PointCloud, topic: topic_name, marking: true, clearing: true}